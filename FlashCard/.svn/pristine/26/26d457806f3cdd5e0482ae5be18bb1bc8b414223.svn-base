package edu.iup.flashcard;

import android.content.Intent;
import android.graphics.Typeface;
import android.os.Handler;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.SoundEffectConstants;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import edu.iup.flashcard.practice.ChooseDeckActivity;
import edu.iup.flashcard.quiz.ChooseLessonActivity;


public class MenuActivity extends ActionBarActivity {


    private static final int HOME = 0;
    private static final int SEND_SYNC = 1;
    private static final int RECIEVE_SYNC = 2;
    private ImageView manage;
    private ImageView quiz;
    private ImageView practice;


    /**
     * Creating the initial Home Screen
     * @param savedInstanceState - the last frame a user was in
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_menu);
        getSupportActionBar().setDisplayShowTitleEnabled(false);

        Typeface tf= Typeface.createFromAsset(getAssets(), "KaushanScript-Regular.otf");

        TextView manageText =(TextView) findViewById(R.id.manageText);
        manageText.setTypeface(tf);

        TextView quizText =(TextView) findViewById(R.id.quizText);
        quizText.setTypeface(tf);

        TextView practiceText =(TextView) findViewById(R.id.practiceText);
        practiceText.setTypeface(tf);

        manage = (ImageView) findViewById(R.id.manageOption);
        manage.setOnTouchListener(new View.OnTouchListener(){
            public boolean onTouch(View v, MotionEvent event) {
                switch(event.getAction()) {
                    case MotionEvent.ACTION_DOWN :
                        manage.playSoundEffect(SoundEffectConstants.CLICK);
                        Handler handler = new Handler();
                        handler.postDelayed(new Runnable() {
                        public void run() {
                            manage.setImageResource(R.drawable.ic_manage);
                            Intent i = new Intent(MenuActivity.this, ChooseLessonActivity.class);
                            MenuActivity.this.startActivity(i);
                        }
                        }, 500);
                    break;
                    case MotionEvent.ACTION_UP :
                        manage.setImageResource(R.drawable.ic_manage_active);
                        break;
                }
                return false;
            }
        });


        quiz = (ImageView) findViewById(R.id.quizOption);
        quiz.setOnTouchListener(new View.OnTouchListener(){
            public boolean onTouch(View v, MotionEvent event) {
                switch(event.getAction()) {
                    case MotionEvent.ACTION_DOWN :
                        quiz.playSoundEffect(SoundEffectConstants.CLICK);
                        Handler handler = new Handler();
                        handler.postDelayed(new Runnable() {
                            public void run() {
                                quiz.setImageResource(R.drawable.ic_quiz);
                                Intent i = new Intent(MenuActivity.this, ChooseLessonActivity.class);
                                MenuActivity.this.startActivity(i);
                            }
                        }, 500);
                        break;
                    case MotionEvent.ACTION_UP :
                        quiz.setImageResource(R.drawable.ic_quiz_active);
                        break;
                }
                return false;
            }
        });

        practice = (ImageView) findViewById(R.id.practiceOption);
        practice.setOnTouchListener(new View.OnTouchListener(){
            public boolean onTouch(View v, MotionEvent event) {
                switch(event.getAction()) {
                    case MotionEvent.ACTION_DOWN :
                        practice.playSoundEffect(SoundEffectConstants.CLICK);
                        Handler handler = new Handler();
                        handler.postDelayed(new Runnable() {
                            public void run() {
                                practice.setImageResource(R.drawable.ic_practice);
                                Intent i = new Intent(MenuActivity.this, ChooseDeckActivity.class);
                                MenuActivity.this.startActivity(i);
                            }
                        }, 500);
                        break;
                    case MotionEvent.ACTION_UP :
                        practice.setImageResource(R.drawable.ic_practice_active);
                        break;
                }
                return false;
            }
        });

    }

    /**
     * Create menu items to show up graphically
     * @param menu - the menu of items
     * @return the menu of gui items
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        MenuItem item1 = menu.add(Menu.NONE, HOME, Menu.NONE, "Home");
        MenuItem item2 = menu.add(Menu.NONE, SEND_SYNC, Menu.NONE, "Send");
        MenuItem item3 = menu.add(Menu.NONE, RECIEVE_SYNC, Menu.NONE, "Recieve");
        item1.setIcon(R.drawable.ic_home);
        item2.setIcon(R.drawable.ic_db_upload);
        item3.setIcon(R.drawable.ic_db_download);

        item1.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
        item2.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
        item3.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
        return super.onCreateOptionsMenu(menu);
    }

    /**
     * Onclick event for the menu items
     * @param item - item clicked
     * @return the operation
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch(item.getItemId()) {
            case HOME:
                //GOTO Home Screen
                return true;
            case SEND_SYNC:
                //Local --> Server
                return true;
            case RECIEVE_SYNC:
                //Server --> Local
                return true;

            default:
                return false;
        }

    }

}
